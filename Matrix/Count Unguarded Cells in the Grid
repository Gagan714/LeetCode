class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int grid[][]=new int[m][n];
        for(int i=0;i<walls.length;i++){
            grid[walls[i][0]][walls[i][1]]=1;
        }
        for(int i=0;i<guards.length;i++){
            grid[guards[i][0]][guards[i][1]]=2;
        }
        for(int i=0;i<guards.length;i++){
            spread(grid,guards[i][0],guards[i][1],m,n);
        }
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    count++;
                }
            }
        }
        return count;
    }
    public void spread(int [][]grid,int row,int column,int m,int n){
        for(int i=row+1;i<m;i++){
            if(grid[i][column]==1 || grid[i][column]==2){
                break;
            }
            grid[i][column]=3;
        }
        for(int i=row-1;i>=0;i--){
            if(grid[i][column]==1 || grid[i][column]==2){
                break;
            }
            grid[i][column]=3;
        }
        for(int j=column+1;j<n;j++){
            if(grid[row][j]==1 || grid[row][j]==2){
                break;
            }
            grid[row][j]=3;
        }
        for(int j=column-1;j>=0;j--){
            if(grid[row][j]==1 || grid[row][j]==2){
                break;
            }
            grid[row][j]=3;
        }
    }
}
