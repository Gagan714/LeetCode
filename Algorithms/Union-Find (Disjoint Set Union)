// Purpose:
// The Union-Find algorithm keeps track of a set of elements partitioned into disjoint (non-overlapping) subsets. It efficiently supports two main operations:
// Find: Determine which subset a particular element belongs to.
// Union: Merge two subsets into one.
// Use Cases:
// Checking if two elements are in the same group.
// Kruskalâ€™s algorithm for finding Minimum Spanning Trees (MST).
// Managing connectivity in dynamic networks.

List<Integer> parent=new ArrayList<>();
    List<Integer> size=new ArrayList<>();
    public void unionFind(int n){
        for(int i=0;i<n;i++){
            parent.add(i);
            size.add(1);
        }
    }
    public int find(int u){
        if(u==parent.get(u)){
            return u;
        }
        int ulp=find(parent.get(u));
        parent.set(u,ulp);
        return parent.get(u);
    }
    public void union(int u,int v){
        int pu=find(u);
        int pv=find(v);
        if(pu==pv){
            return;
        }
        if(size.get(pu)<size.get(pv)){
            parent.set(pu,pv);
            size.set(pv,size.get(pv)+size.get(pu));
        }else{
            parent.set(pv,pu);
            size.set(pu,size.get(pu)+size.get(pv));
        }
    }
