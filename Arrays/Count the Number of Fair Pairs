class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) {
        long count=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            int left=binaryleft(lower-nums[i],nums);
            int right=binaryright(upper-nums[i],nums);
            if(i>=left && i<=right){
                right--;
            }
            if(right-left>=0 && right!=-1 && left!=-1){
                count+=(right-left)+1;
            }
        }
        return count/2;
    }
    public int binaryleft(long num,int []nums){
        int left=0;
        int right=nums.length-1;
        int result=-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]>=num){
                result=mid;
                right=mid-1;
            }else{
                left=mid+1;
            }
        }
        return result;
    }
    public int binaryright(long num,int []nums){
        int left=0;
        int right=nums.length-1;
        int result=-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(nums[mid]<=num){
                result=mid;
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        return result;
    }
}
