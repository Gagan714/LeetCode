class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long sum=0;
        for(int i=0;i<k;i++){
            sum+=nums[i];
        }
        PriorityQueue<long []> pq=new PriorityQueue<>((a,b)-> Long.compare(b[1],a[1]));
        pq.add(new long []{0,sum});
        for(int i=k;i<nums.length;i++){
            sum-=nums[i-k];
            sum+=nums[i];
            pq.add(new long[]{(long)i-k+1,sum});
        }
        while(!pq.isEmpty()){
            long []arr=pq.remove();
            boolean output=check((int)arr[0],(int)arr[0]+k,nums);
            if(output){
                return arr[1];
            }
        }
        return 0;
    }
    public boolean check(int start,int end,int []nums){
        HashSet<Integer> set=new HashSet<>();
        for(int i=start;i<end;i++){
            if(set.contains(nums[i])){
                return false;
            }
            set.add(nums[i]);
        }
        return true;
    }
}
