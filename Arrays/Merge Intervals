class Solution {
    public int[][] merge(int[][] intervals) {
        List<ArrayList<Integer>> output = new ArrayList<>();
        ArrayList<Integer> add = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        for (int i = 0; i < intervals.length; i++) {
            for (int j = 0; j < intervals[0].length; j++) {
                add.add(intervals[i][j]);
            }
            if (output.size() == 0) {
                output.add(add);
            } else {
                ArrayList<Integer> temp = output.get(output.size() - 1);
                if (temp.get(1) >= add.get(0)) {
                    ArrayList<Integer> temp1 = new ArrayList<>();
                    temp1.add(Math.min(temp.get(0),add.get(0)));
                    temp1.add(Math.max(add.get(1),temp.get(1)));
                    output.set(output.size() - 1, temp1); // Update the last interval
                } else {
                    output.add(add);
                }
            }
            add=new ArrayList<>(); // Clear the 'add' list by creating a new one
        }

        int[][] answer = new int[output.size()][2];
        for (int i = 0; i < output.size(); i++) {
            for (int j = 0; j < 2; j++) {
                answer[i][j] = output.get(i).get(j);
            }
        }
        return answer; 
    }
}
