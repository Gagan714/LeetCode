class Solution {
    public int reachableNodes(int n, int[][] edges, int[] restricted) {
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            graph.get(edges[i][0]).add(edges[i][1]);
            graph.get(edges[i][1]).add(edges[i][0]);
        }
        boolean vis[]=new boolean[n];
        for(int i=0;i<restricted.length;i++){
            vis[restricted[i]]=true;
        }
        Queue<Integer> q=new LinkedList<>();
        q.add(0);
        int count=0;
        while(!q.isEmpty()){
            int curr=q.remove();
            vis[curr]=true;
            for(int i=0;i<graph.get(curr).size();i++){
                if(!vis[graph.get(curr).get(i)]){
                    q.add(graph.get(curr).get(i));
                }
            }
            count++;
        }
        return count;
    }
}
