class Solution {
    int []output=new int[2];
    List<Integer> parent=new ArrayList<>();
    List<Integer> size=new ArrayList<>();
    public void unionFind(int n){
        for(int i=0;i<n;i++){
            parent.add(i);
            size.add(1);
        }
    }
    public int find(int u){
        if(u==parent.get(u)){
            return u;
        }
        int ulp=find(parent.get(u));
        parent.set(u,ulp);
        return parent.get(u);
    }
    public void union(int u,int v){
        int pu=find(u);
        int pv=find(v);
        if(pu==pv){
            output[0]=u;
            output[1]=v;
            return;
        }
        if(size.get(pu)<size.get(pv)){
            parent.set(pu,pv);
            size.set(pv,size.get(pv)+size.get(pu));
        }else{
            parent.set(pv,pu);
            size.set(pu,size.get(pu)+size.get(pv));
        }
    }
    public int[] findRedundantConnection(int[][] edges) {
        int n=edges.length;
        unionFind(n+1);
        for(int i=0;i<n;i++){
            union(edges[i][0],edges[i][1]);
        }
        return output;
    }
}
