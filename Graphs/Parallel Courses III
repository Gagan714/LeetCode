class Solution {
    int min=Integer.MAX_VALUE;
    public int minimumTime(int n, int[][] relations, int[] time) {
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }
        for(int i=0;i<relations.length;i++){
            list.get(relations[i][1]-1).add(relations[i][0]-1);
        }
        int dp[]=new int[n];
        Arrays.fill(dp,-1);
        for(int i=0;i<dp.length;i++){
            if(dp[i]==-1){
                recurse(dp,list,i,time);
            }
        }
        int max=0;
        for(int i=0;i<dp.length;i++){
            max=Math.max(dp[i],max);
        }
        return max;
    }
    public void recurse(int []dp,List<List<Integer>> graph,int src,int []time){
        dp[src]=time[src];
        for(int i=0;i<graph.get(src).size();i++){
            if(dp[graph.get(src).get(i)]==-1){
                recurse(dp,graph,graph.get(src).get(i),time);
            }
            dp[src]=Math.max(dp[src],dp[graph.get(src).get(i)]+time[src]);
        }
    }
}
