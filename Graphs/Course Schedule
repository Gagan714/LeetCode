class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<prerequisites.length;i++){
            int dest=prerequisites[i][0];
            int src=prerequisites[i][1];
            graph.get(src).add(dest);
        }
        boolean vis[]=new boolean[numCourses];
        boolean present[]=new boolean[numCourses];
        for(int i=0;i<numCourses;i++){
            if(!vis[i]){
                boolean output=dfs(graph,i,vis,present);
                if(output){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean dfs(List<List<Integer>> graph,int curr,boolean []vis,boolean []present){
        vis[curr]=true;
        present[curr]=true;
        for(int i=0;i<graph.get(curr).size();i++){
            int e=graph.get(curr).get(i);
            if(present[e]){
                return true;
            }
            if(!vis[e]){
                boolean output=dfs(graph,e,vis,present);
                if(output){
                    return true;
                }
            }
        }
        present[curr]=false;
        return false;
    }
}
