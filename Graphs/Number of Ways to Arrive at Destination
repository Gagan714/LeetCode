class Pair{
    int node;
    int time;
    Pair(int node,int time){
        this.node=node;
        this.time=time;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        int mod=1000000007;
        List<List<Pair>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<roads.length;i++){
            graph.get(roads[i][0]).add(new Pair(roads[i][1],roads[i][2]));
            graph.get(roads[i][1]).add(new Pair(roads[i][0],roads[i][2]));
        }
        long ways[]=new long[n];
        boolean vis[]=new boolean[n];
        int dist[]=new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        ways[0]=1;
        dist[0]=0;
        PriorityQueue<Pair> pq=new PriorityQueue<>((x,y)->x.time-y.time);
        pq.add(new Pair(0,0));
        while(!pq.isEmpty()){
            int curnode=pq.peek().node;
            int curtime=pq.peek().time;
            pq.remove();
            vis[curnode]=true;
            for(int i=0;i<graph.get(curnode).size();i++){
                int adjnode=graph.get(curnode).get(i).node;
                int adjtime=graph.get(curnode).get(i).time;
                if(!vis[adjnode]){
                if(curtime+adjtime<dist[adjnode]){
                    dist[adjnode]=curtime+adjtime;
                    ways[adjnode]=ways[curnode];
                    pq.add(new Pair(adjnode,dist[adjnode]));
                }else if(dist[adjnode]==curtime+adjtime){
                    ways[adjnode]=ways[adjnode]+ways[curnode]%mod;
                }
                }
            }
        }
        return (int)(ways[n-1]%mod);
    }
}
