class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<>());
        }
        for(int j=0;j<dislikes.length;j++){
           int a= dislikes[j][0];
           int b= dislikes[j][1];
           graph.get(a).add(b);
           graph.get(b).add(a);
        }
        int []vis=new int[n+1];
        Arrays.fill(vis,-1);
        for(int i=0;i<vis.length;i++){
            if(vis[i]==-1 && !check(graph,vis,i)){
                return false;
            }
        }
        return true;
    }
    public boolean check(List<List<Integer>> graph,int []color,int src){
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        color[src]=0;
        while(!q.isEmpty()){
            int n=q.remove();
            for(int neighbour : graph.get(n)){
                if(color[neighbour]==-1){
                    color[neighbour]=1-color[n];
                    q.add(neighbour);
                }else if(color[neighbour]==color[n]){
                    return false;
                }
            }
        }
        return true;
    }
}
