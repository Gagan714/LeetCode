class Solution {
    public int minDistance(String word1, String word2) {
        if(word1.equals(word2)){
            return 0;
        }
       int i=word1.length();
       int j=word2.length();
       int dp[][]=new int[i][j];
       return recurse(i-1,j-1,word1,word2,dp); 
    }
    public int recurse(int i,int j,String s,String t,int [][]dp){
        if(j<0){
            return i+1;
        }
        if(i<0){
            return j+1;
        }
        if(dp[i][j]!=0){
            return dp[i][j];
        }
        if(s.charAt(i)==t.charAt(j)){
            return dp[i][j]= 0+recurse(i-1,j-1,s,t,dp);
        }
        int insert=1+recurse(i,j-1,s,t,dp);
        int delete=1+recurse(i-1,j,s,t,dp);
        int replace=1+recurse(i-1,j-1,s,t,dp);
        return dp[i][j]= Math.min(insert,Math.min(delete,replace));
    }
}
