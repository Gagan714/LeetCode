class Solution {
    public int change(int amount, int[] coins) {
       int n=coins.length;
       int dp[][]=new int[n][amount+1];
       for(int i=0;i<amount+1;i++){
        if(i%coins[0]==0){
            dp[0][i]=1;
        }else{
            dp[0][i]=0;
        }
       }
       for(int i=1;i<coins.length;i++){
        for(int j=0;j<amount+1;j++){
        int dont=dp[i-1][j];
        int take=0;
        if(j>=coins[i]){
            take=dp[i][j-coins[i]];
        }
         dp[i][j]=take+dont; 
        }
       }
       return dp[n-1][amount];
    }
    public int recurse(int n,int amount,int []coins,int [][]dp){
        if(n==0){
            if(amount%coins[n]==0){
                return 1;
            }
            return 0;
        }
        if(dp[n][amount]!=-1){
            return dp[n][amount];
        }
        int dont=recurse(n-1,amount,coins,dp);
        int take=0;
        if(amount>=coins[n]){
            take=recurse(n,amount-coins[n],coins,dp);
        }
        return dp[n][amount]=take+dont;
    }
}
