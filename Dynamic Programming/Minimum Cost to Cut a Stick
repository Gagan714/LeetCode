class Solution {
    public int minCost(int n, int[] cuts) {
       Arrays.sort(cuts);
       List<Integer> list=new ArrayList<>();
       list.add(0);
       for(int i=0;i<cuts.length;i++){
        list.add(cuts[i]);
       }
       list.add(n);
       int dp[][]=new int[list.size()][list.size()];
       return recurse(1,cuts.length,list,dp);
    }
    public int recurse(int i,int j,List<Integer> list,int dp[][]){
        if(i>j){
            return 0;
        }
        if(dp[i][j]!=0){
            return dp[i][j];
        }
        int min=Integer.MAX_VALUE;
        for(int k=i;k<=j;k++){
            int cost=(list.get(j+1)-list.get(i-1))+recurse(i,k-1,list,dp)+recurse(k+1,j,list,dp);
            min=Math.min(cost,min);
        }
        return dp[i][j]=min;
    }
}
