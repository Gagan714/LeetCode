class Solution {
    int mod=1000000007;
    public int countRoutes(int[] locations, int start, int finish, int fuel) {
        int [][]dp=new int[locations.length+1][fuel+1];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        return recurse(locations,start,finish,fuel,dp);
    }
    public int recurse(int []locations,int start,int end,int fuel,int dp[][]){
        if(dp[start][fuel]!=-1){
            return dp[start][fuel];
        }
        long count=start==end?1:0;
        for(int i=0;i<locations.length;i++){
            if(i!=start){
                if(Math.abs(locations[start]-locations[i])<=fuel){
                    long val=recurse(locations,i,end,fuel-Math.abs(locations[start]-locations[i]),dp);
                    count+=val%mod;
                    count=count%mod;
                }
            }
        }
        return dp[start][fuel]=(int)count;
    }
}
