class Solution {
    public int minInsertions(String s) {
        int n = s.length();
        StringBuilder sb = new StringBuilder(s);
        String t = sb.reverse().toString();
        int dp[][] = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                dp[i][j] = -1;
            }
        }
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 0;
            dp[0][i] = 0;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        int palindrome = dp[n][n];
        return n - palindrome;
        //return n-recurse(n,n,s,t,dp);
    }

    public int recurse(int i, int j, String s, String t, int[][] dp) {
        if (i == 0 || j == 0) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        if (s.charAt(i - 1) == t.charAt(j - 1)) {
            return dp[i][j] = 1 + recurse(i - 1, j - 1, s, t, dp);
        }
        return dp[i][j] = Math.max(recurse(i - 1, j, s, t, dp), recurse(i, j - 1, s, t, dp));
    }
}
